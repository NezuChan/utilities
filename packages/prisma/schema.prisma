generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  guildId              String              @id @db.VarChar
  locale               String              @default("en-US")
  DJRoles              DJRole[]
  DJUsers              DJUser[]
  prefix               String              @default("n!")

  defaultVolume        defaultVolume?
  clearQueueAfterEnd   clearQueueAfterEnd?
  DJMode               DJMode?
  autoPlay             autoPlay?
  announceTrackStart   announceTrackStart?
  stayInVc             StayInVc?
  phising              Phising?
  invite               Invite?
  cases                Case[]
  tempVoices           TempVoice[]

  premiumTierType      TierType            @default(FREE)
  premiumActivatedBy   String?
}

model Instance {
  id                  Int                 @id @default(autoincrement())
  instanceId          String              @unique
  guildId             String
  userId              String
  type                String
  createdAt           DateTime            @default(now())

  user                User                @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
}

model TempVoice {
  id                  Int                 @id @default(autoincrement())
  guildId             String
  channelId           String
  parentChannelId     String
  ownerId             String
  taskId              String?

  guild               Guild               @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model Case {
  id                  Int                 @id @default(autoincrement())
  guildId             String
  caseId              String              @db.VarChar
  userId              String
  reason              String
  executorId          String
  type                CaseType

  guild               Guild               @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model DJRole {
  id                  Int                 @id @default(autoincrement())
  roleId              String              @db.VarChar
  authorId            String
  guildId             String

  guild               Guild               @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model DJUser {
  id                  Int                 @id @default(autoincrement())
  userId              String
  authorId            String
  guildId             String              
  guild               Guild               @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model defaultVolume {
  guildId              String              @id @db.VarChar
  activatedBy          String
  defaultVolume        Int                 @default(100)

  guild                Guild               @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model clearQueueAfterEnd {
  guildId              String              @id @db.VarChar
  activatedBy          String
  enabled              Boolean             @default(true)
  
  guild                Guild               @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model DJMode {
  guildId              String              @id @db.VarChar
  activatedBy          String
  enabled              Boolean             @default(false)
  
  guild                Guild               @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model autoPlay {
  guildId          String  @id @db.VarChar
  activatedBy      String
  enabled          Boolean @default(false)
  
  guild            Guild   @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model announceTrackStart {
  guildId          String  @id @db.VarChar
  activatedBy      String
  enabled          Boolean @default(true)
  channel          String?
  
  guild            Guild   @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model StayInVc {
  guildId          String  @id @db.VarChar
  activatedBy      String
  enabled          Boolean @default(false)
  
  guild            Guild   @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id            Int         @id @default(autoincrement())
  userId        String      @unique
  patreonUserId String?     @unique
  tier          TierType    @default(FREE)
  type          PremiumType @default(OTHER)

  instances     Instance[]

  additionalTracksSize    Int @default(0)
  additionalPlaylistsSize Int @default(0)
  tier1Tickets            Int @default(0)
  tier2Tickets            Int @default(0)
}

model Invite {
  id          Int           @id @default(autoincrement())
  guildId     String        @unique
  enabled     Boolean       @default(false)
  adminBypass Boolean       @default(false)

  guild       Guild         @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model Phising {
  id        Int           @id @default(autoincrement())
  guildId   String        @unique
  enabled   Boolean       @default(false)
  level     PhisingLevel  @default(MEDIUM)

  guild     Guild         @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction)
}

model Playlist {
  playlistId           String @id @db.VarChar
  userId               String
  playlistName         String
  trackLimit           Int    @default(20)

  tracks               PlaylistTrack[]
}

model PlaylistTrack {
  trackId         String @id @db.VarChar
  userId          String
  playlistId      String
  track           Json

  playlist        Playlist @relation(fields: [playlistId], references: [playlistId], onDelete: Cascade, onUpdate: NoAction)
}

enum CaseType {
  BAN
  KICK
  MUTE
  UNBAN
  UNMUTE
  WARN
}

enum PhisingLevel {
  LOW
  MEDIUM
  HIGH
  HIGHEST
}

enum TierType {
  FREE
  TIER_1
  TIER_2
}

enum PremiumType {
  OTHER
  PATREON
  GIVEAWAY
}