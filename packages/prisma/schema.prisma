generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id       String   @default(cuid())
  guildId  String
  clientId String
  locale   String   @default("en-US")
  DJRoles  DJRole[]
  DJUsers  DJUser[]
  prefix   String   @default("n!")

  defaultVolume      defaultVolume?
  clearQueueAfterEnd clearQueueAfterEnd?
  DJMode             DJMode?
  autoPlay           autoPlay?
  announceTrackStart announceTrackStart?
  stayInVc           StayInVc?
  phising            Phising?
  invite             Invite?
  cases              Case[]
  tempVoices         TempVoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  premiumTierType    TierType @default(FREE)
  premiumActivatedBy String?

  @@id([guildId, clientId])
}

model TempVoice {
  id        String  @default(cuid())
  guildId   String
  clientId  String
  channelId String
  parentId  String
  ownerId   String
  taskId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId])
}

model Case {
  id         String   @default(cuid())
  guildId    String
  clientId   String
  caseId     String   @db.VarChar
  userId     String
  reason     String
  executorId String
  type       CaseType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId])
}

model DJRole {
  id       String @default(cuid())
  roleId   String @db.VarChar
  authorId String
  guildId  String
  clientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId, roleId])
}

model DJUser {
  id       String @default(cuid())
  userId   String
  authorId String
  guildId  String
  clientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId, userId])
}

model defaultVolume {
  id            String @default(cuid())
  guildId       String
  clientId      String
  activatedBy   String
  defaultVolume Int    @default(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId])
}

model clearQueueAfterEnd {
  id          String  @default(cuid())
  guildId     String
  clientId    String
  activatedBy String
  enabled     Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId])
}

model DJMode {
  id          String  @default(cuid())
  guildId     String
  clientId    String
  activatedBy String
  enabled     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId])
}

model autoPlay {
  id          String  @default(cuid())
  guildId     String
  clientId    String
  activatedBy String
  enabled     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId])
}

model announceTrackStart {
  id          String  @default(cuid())
  guildId     String
  clientId    String
  activatedBy String
  enabled     Boolean @default(true)
  channel     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId])
}

model StayInVc {
  id          String  @default(cuid())
  guildId     String
  clientId    String
  activatedBy String
  enabled     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId])
}

model Invite {
  id          String  @default(cuid())
  guildId     String
  clientId    String
  enabled     Boolean @default(false)
  adminBypass Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId])
}

model Phising {
  id       String       @default(cuid())
  guildId  String
  clientId String
  enabled  Boolean      @default(false)
  level    PhisingLevel @default(MEDIUM)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [guildId, clientId], references: [guildId, clientId], onDelete: Cascade, onUpdate: NoAction)

  @@id([guildId, clientId])
}

model Instance {
  id     String @id @default(cuid())
  userId String
  botId  String

  memoryLimit String @default("128")
  type        String
  node        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [id], references: [userId], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id            String      @default(cuid())
  userId        String      @id
  email         String?
  patreonUserId String?
  tier          TierType    @default(FREE)
  type          PremiumType @default(OTHER)

  tier1Tickets Int @default(0)
  tier2Tickets Int @default(0)

  instances Instance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlist {
  id           String             @default(cuid())
  playlistId   String             @id @db.VarChar
  userId       String
  playlistName String
  trackLimit   Int                @default(20)
  visibility   PlaylistVisibility @default(PUBLIC)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tracks PlaylistTrack[]
}

model PlaylistTrack {
  id         String @default(cuid())
  trackId    String @id @db.VarChar
  userId     String
  playlistId String
  track      Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [playlistId], onDelete: Cascade, onUpdate: NoAction)
}

enum PlaylistVisibility {
  PUBLIC
  PRIVATE
}

enum CaseType {
  BAN
  KICK
  MUTE
  UNBAN
  UNMUTE
  WARN
}

enum PhisingLevel {
  LOW
  MEDIUM
  HIGH
  HIGHEST
}

enum TierType {
  FREE
  SUPPORTER
  TIER_1
  TIER_2
  TIER_3
}

enum PremiumType {
  OTHER
  PATREON
  GIVEAWAY
}
